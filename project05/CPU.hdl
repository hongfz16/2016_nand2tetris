// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	And(a=instruction[15],b=instruction[11],out=zx);
	And(a=instruction[15],b=instruction[10],out=nx);
	And(a=instruction[15],b=instruction[9],out=zy);
	And(a=instruction[15],b=instruction[8],out=ny);
	And(a=instruction[15],b=instruction[7],out=f);
	And(a=instruction[15],b=instruction[6],out=no);
	And(a=instruction[15],b=instruction[5],out=sel1);
	And(a=instruction[15],b=instruction[4],out=sel2);
	And(a=instruction[15],b=instruction[3],out=writem);
	And(a=instruction[15],b=instruction[2],out=ngsel);
	And(a=instruction[15],b=instruction[1],out=zrsel);
	And(a=instruction[15],b=instruction[0],out=largesel);
	Mux16(a=instruction[0..15],b=out1,sel=sel1,out=out3);
	
	Not(in=instruction[15],out=nin15);
	Or(a=sel1,b=nin15,out=selshadow);
	ARegister(in=out3,load=selshadow,out=out4,out[0..14]=addressM);
	Mux16(a=out4,b=inM[0..15],sel=instruction[12],out=out5);
	DRegister(in=out1,load=sel2,out=out6);
	ALU(x=out6,y=out5,zx=zx,nx=nx,zy=zy,ny=ny,f=f,no=no,out=out1,zr=zrout,ng=ngout);
	Or(a=writem,b=false,out=writeM);
	And(a=ngout,b=ngsel,out=out7);
	And(a=zrout,b=zrsel,out=out8);
	Or(a=ngout,b=zrout,out=out9);
	Not(in=out9,out=out10);
	And(a=out10,b=largesel,out=out11);
	Or(a=out7,b=out8,out=out12);
	Or(a=out11,b=out12,out=jumpjud);	

PC(reset=reset,load=jumpjud,inc=true,in=out4,out[0..14]=pc[0..14],out[15]=whatever);
	Or16(a=out1,b[0..15]=false,out=outM[0..15]);
	
}