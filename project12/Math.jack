// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

	static Array b;
	static Array c;
    /** Initializes the library. */
    function void init() {
    	var int i,res;
    	
    	let b=Array.new(16);
    	let c=Array.new(16);
    	let i=0;
    	let res=1;
    	while(i<16)
    	{
    		let b[i]=res;
    		let res=res+res;
    		let i=i+1;
    	}
    	return;
	}

    /** Returns the absolute value of x. */
    function int abs(int x) {
    	if(x<0) 
		{
			return -x;
		}
    	return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
    	var int i,rtn;
    	if(y<0)
    	{
    		let x=-x;
    		let y=-y;
    	}
    	let i=0;
    	let rtn=0;
    	while(i<15)
    	{
    		if(y&b[i]=b[i])
			{
				let rtn=rtn+x;
			}
			let x=x+x;
			let i=i+1;
    	}
    	return rtn;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
    	var int i,rtn,sgn;
    	if(((x<0)&(y>0))|((x>0)&(y<0))) 
    	{
			let sgn=-1;
    	}
		else 
		{
			let sgn=1;
    	}
		let x=Math.abs(x);
    	let y=Math.abs(y);
    	let i=0;
    	let rtn=0;
    	while(i<16)
    	{
    		let c[i]=y;
    		let y=y+y;
    		let i=i+1;
    	}
    	let i=0;
    	while(c[i]>0)
    	{
    		let i=i+1;
    	}
    	let i=i-1;
    	while(~(i<0))
    	{
    		if(~(x<c[i])) 
    		{
    			let x=x-c[i];
    			let rtn=rtn+b[i];
    		}
    		let i=i-1;
    	}
    	if(sgn=-1) 
    	{
			let rtn=-rtn;
    	}
		return rtn;
	}

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
/*
    	var int l,r,mid;
    	let l=0;
    	let r=181;
    	while(l<r)
 */
 		var int rtn,i,t;
    	let rtn=0;
    	let i=7;
    	while(~(i<0))
    	{
    		let t=rtn+b[i];
    		if((~(t>181))&(~((t*t)>x)))
    		{
				let rtn=rtn+b[i]; 
    		}
    		let i=i-1;
		}
    	return rtn;
   
	 }

    /** Returns the greater number. */
    function int max(int a, int b) {
    	if(a>b)
		{
			return a;
    	}
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
    	if(a<b)
		{
			return a;
    	}
		return b;
    }
}
